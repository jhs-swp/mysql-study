更新操作与查询操作不同， 首先走查询操作， 然后会涉及到两个重要的日志模块，redo log(重做日志) 和 binlog(归档日志).

2: mysql对数据进行变更，是怎么与磁盘交互的？
    如果mysql在更新数据的时候，每一次更新操作都写进磁盘，然后磁盘也要找到对应的记录，然后在更新，整个过程IO成本，查找成本都很高，这样每发生一次数据变更都得这样，更新效率不是很高，
所以采用WAL技术，WAL全称: Write_Ahead Logging(提前写日志), 就是先写日志，等到不忙的时候 再写磁盘。
    具体来说，当有一条数据需要更新的时候，Innodb引擎 就会先把记录写道redo log里面，并更新内存，这个时候更新就完成了，同时，Innodb引擎会在适当的时候，将这个操作记录更新到磁盘里面，
而这个操作往往是在系统比较空闲的时候。

redo log:
    1: redo log 大小是固定的， 他会循环写入，可以形象分为write pos 和 check point两部分，write pos是记录当前的位置，一边写，一边向后移动，写完后又开始回到开头， check point是当前
要擦除的为止，也是向后推移并且循环的，擦除记录前把记录更新到数据文件里面， write pos 和 check point 相差的位置，则可以用来记录新的更新操作， write pos 追上checkout point的时候，不能执行
更新操作，得停一下，擦掉一些记录，把checkpoint推进一下才好。
    2：有了redo log,Innodb久可以保证及时数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe(崩溃安全)

binlog:
    Mysql整体可以分为Server层 和引擎层(负责存储相关的具体事宜)两块， redo log 为 innodb特有，server层也有自己的日志，称为binlog日志(归档日志)


//区别:
    1: redo log 为innodb特有, binlog为mysql的server实现,所有引擎都可以使用
    2: redo是物理日志，记录的是"数据进行了什么修改", binlog是逻辑日志,记录的是这个语句的原始逻辑，比如: 给ID = 2 的这一行加1
    3: redo是循环写的，空间固定会用完，binlog是可以追加写入的，写到一定大小后会切换到下一个，并不会覆盖以前的日志。

两阶段提交： 为了保证两份日志之间逻辑的一致性/类似于事务
redolog 处于prepare阶段 -- > 写入binlong -- > 提交事务，处于commit 状态

数据恢复，先看是一周一备，还是一天一备份，如果一天的话，先恢复昨天的一个备份，在把到今天删除时间点前的 操作都统一复制一下

为什么要使用两阶段提交：
    反证法： 1：先写redo log 后写bin log Mysql进程异常重启，此时redo log写完，bin log没写完，此时binlong 数据恢复的时候，会少一条redo log 同步的数据
            2：先写bin log 后写redo log，则会先更新数据，后事务失效，但是实际并没有执行事务，恢复的时候，事务却执行了。


良好设置:
    redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议
你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失

    sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。